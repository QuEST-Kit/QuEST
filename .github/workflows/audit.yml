name: sanitisation and leak test


on:
  push:
    branches:
      - llvm-memcheck
  pull_request:
    branches:
      - llvm-memcheck


jobs:


  # run LLVM address sanitiser
  sanitisation-test:
    name: address sanitisation [${{ matrix.precision }}]
    runs-on: macos-latest

    # try all precisions, but forego all parallelisation
    strategy:
      matrix:
        precision: [1, 2, 4]

    # constants (which I cannot split overlines, GRR)
    env:
      build_dir: "build"
      sanitiser_flags: -g -fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address -fsanitize-address-use-after-scope

    # perform the job
    steps:
      - name: Get QuEST
        uses: actions/checkout@v4

      # compile QuEST using clang address sanitiser (will alias MSVC on Windows)
      - name: Configure CMake to use sanitiser
        run: >
          cmake -B ${{ env.build_dir }}
          -DCMAKE_CXX_COMPILER=clang++
          -DENABLE_MULTITHREADING=OFF
          -DFLOAT_PRECISION=${{ matrix.precision }}
          -DCMAKE_CXX_FLAGS="${{ env.sanitiser_flags }}"
          -DCMAKE_EXE_LINKER_FLAGS="${{ env.sanitiser_flags }}"

      - name: Compile with sanitiser
        run: cmake --build ${{ env.build_dir }}

      - name: Run unit tests with active sanitiser
        run: ctest -j2 --output-on-failure
        working-directory: ${{ env.build_dir }}

  
  # run valgrind
  memory-leak-test:
    name: memory checks [${{ matrix.precision }}]
    runs-on: ubuntu-latest

    # try all precisions, but forego all parallelisation
    strategy:
      matrix:
        precision: [1, 2, 4]

    # constants (which I cannot split overlines, GRR)
    env:
      build_dir: "build"

    # compile QuEST like normal and run valgrind upon it
    steps:
      - name: Get QuEST
        uses: actions/checkout@v4

      - name: Configure CMake
        run: >
          cmake -B ${{ env.build_dir }}
          -DFLOAT_PRECISION=${{ matrix.precision }}
          -DENABLE_MULTITHREADING=OFF

      - name: Compile QuEST
        run: cmake --build ${{ env.build_dir }}
  
      - name: Install valgrind
        run: sudo apt install -y valgrind

      # make valgrind fail CI if detecting issue
      - name: Run unit tests under valgrind
        run: valgrind --leak-check=full --error-exitcode=1 ./tests/tests
        working-directory: ${{ env.build_dir }}
