# Authors : 
#  - Oliver Thomson Brown
#
# Contributions to previous builds from :
#  - Ania Brown
#  - Jacob Wilkins
#  - Balint Koczor
#  - Tyson Jones

cmake_minimum_required(VERSION 3.21)

project(QuEST
  VERSION 4.0.0
  DESCRIPTION "Quantum Exact Simulation Toolkit"
  LANGUAGES CXX C
)

set(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})

## Dependencies

# GNUInstallDirs to provide sensible default install directory names
include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

# Maths
if (NOT MSVC)
  find_library(MATH_LIBRARY m REQUIRED)
endif()

## Configuration options

# Build type
# Default to "Release"
# Using recipe from Kitware Blog post
# https://www.kitware.com/cmake-and-the-default-build-type/
set(default_build_type "Release")
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to '${default_build_type}' as none was specified.")
  set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE
      STRING "Choose the type of build." FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

# Library type
# Shared library by default
option(BUILD_SHARED_LIBS "Build shared library. Turned ON by default." ON)
message(STATUS "Shared library is turned ${BUILD_SHARED_LIBS}. Set BUILD_SHARED_LIBS to modify.")

# Library naming
set(LIB_NAME QuEST 
  CACHE 
  STRING
  "Change library name. LIB_NAME is QuEST by default."
)
message(STATUS "Library will be named lib${LIB_NAME}. Set LIB_NAME to modify.")

option(VERBOSE_LIB_NAME "Modify library name based on compilation configuration. Turned OFF by default." OFF)
message(STATUS "Verbose library naming is turned ${VERBOSE_LIB_NAME}. Set VERBOSE_LIB_NAME to modify.")

# Precision
set(FLOAT_PRECISION 2 
  CACHE 
  STRING 
  "Whether to use single, double, or quad floating point precision in the state vector. {1,2,4}"
)
set_property(CACHE FLOAT_PRECISION PROPERTY STRINGS
  1
  2
  4
)
message(STATUS "Precision set to ${FLOAT_PRECISION}. Set FLOAT_PRECISION to modify.")

if (VERBOSE_LIB_NAME)
  string(CONCAT LIB_NAME ${LIB_NAME} "-fp${FLOAT_PRECISION}")
endif()

# Examples
option(
  BUILD_EXAMPLES
  "Whether the example programs will be built alongside the QuEST library. Turned OFF by default."
  OFF
)
message(STATUS "Examples are turned ${BUILD_EXAMPLES}. Set BUILD_EXAMPLES to modify.")

# Testing
option(
  ENABLE_TESTING
  "Whether the test suite will be built alongside the QuEST library. Turned ON by default."
  ON
)
message(STATUS "Testing is turned ${ENABLE_TESTING}. Set ENABLE_TESTING to modify.")

option(
  DOWNLOAD_CATCH2
  "Whether Catch2 v3 will be downloaded if it is not found. Turned ON by default."
  ON
)

# Multithreading
option(
  ENABLE_MULTITHREADING 
  "Whether QuEST will be built with shared-memory parallelism support using OpenMP. Turned ON by default." 
  ON
)
message(STATUS "Multithreading is turned ${ENABLE_MULTITHREADING}. Set ENABLE_MULTITHREADING to modify.")

# Distribution
option(
  ENABLE_DISTRIBUTION 
  "Whether QuEST will be built with distributed parallelism support using MPI. Turned OFF by default." 
  OFF
)
message(STATUS "Distribution is turned ${ENABLE_DISTRIBUTION}. Set ENABLE_DISTRIBUTION to modify.")

# GPU Acceleration
option(
  ENABLE_CUDA
  "Whether QuEST will be built with support for NVIDIA GPU acceleration. Turned OFF by default."
  OFF
)
message(STATUS "NVIDIA GPU acceleration is turned ${ENABLE_CUDA}. Set ENABLE_CUDA to modify.")

if (ENABLE_CUDA)
  option(
    ENABLE_CUQUANTUM
    "Whether QuEST will be built with support for NVIDIA CuQuantum. Turned OFF by default."
    OFF
  )
  message(STATUS "CuQuantum support is turned ${ENABLE_CUQUANTUM}. Set ENABLE_CUQUANTUM to modify.")
endif()

option(
  ENABLE_HIP
  "Whether QuEST will be built with support for AMD GPU acceleration. Turned OFF by default."
)
message(STATUS "AMD GPU acceleration is turned ${ENABLE_HIP}. Set ENABLE_HIP to modify.")

# Throw on disallowed combinations
if (ENABLE_CUDA AND ENABLE_HIP)
  message(FATAL_ERROR "QuEST cannot support CUDA and HIP simultaneously.")
endif()

if ((ENABLE_CUDA OR ENABLE_HIP) AND FLOAT_PRECISION STREQUAL 4)
  message(FATAL_ERROR "Quad precision is not supported on GPU. Please disable GPU acceleration or lower precision.")
endif()

# Deprecated API
option(
  ENABLE_DEPRECATED_API
  "Whether QuEST will be built with deprecated API support. Turned OFF by default."
  OFF
)
message(STATUS "Deprecated API support is turned ${ENABLE_DEPRECATED_API}. Set ENABLE_DEPRECATED_API to modify.")

## Library

add_library(QuEST)

# Add namespaced alias to support inclusion of QuEST as a subproject
add_library(QuEST::QuEST ALIAS QuEST)

# Set include directories
target_include_directories(QuEST 
  PUBLIC 
  $<BUILD_INTERFACE:
    ${CMAKE_CURRENT_SOURCE_DIR};
    ${CMAKE_CURRENT_SOURCE_DIR}/quest/include
  > $<INSTALL_INTERFACE:include>
)

# Add required C and C++ standards
target_compile_features(QuEST
  PUBLIC
  c_std_11
  cxx_std_17
)

# Turn on all compiler warnings
if (MSVC)
  target_compile_options(QuEST PRIVATE /W4)
else()
  target_compile_options(QuEST PRIVATE -Wall)
endif()

# Set user options
target_compile_definitions(QuEST PUBLIC FLOAT_PRECISION=${FLOAT_PRECISION})

if (ENABLE_MULTITHREADING)
  find_package(OpenMP REQUIRED)
  target_compile_definitions(QuEST PUBLIC COMPILE_OPENMP=1)
  target_link_libraries(QuEST
    PUBLIC
    OpenMP::OpenMP_CXX
    OpenMP::OpenMP_C
  )
  if (VERBOSE_LIB_NAME)
    string(CONCAT LIB_NAME ${LIB_NAME} "+mt")
  endif()
else()
  target_compile_definitions(QuEST PUBLIC COMPILE_OPENMP=0)
endif()

if (ENABLE_DISTRIBUTION)
  find_package(MPI REQUIRED
    COMPONENTS CXX
  )
  target_compile_definitions(QuEST PUBLIC COMPILE_MPI=1)
  target_link_libraries(QuEST
    PUBLIC
    MPI::MPI_CXX
  )
  if (VERBOSE_LIB_NAME)
    string(CONCAT LIB_NAME ${LIB_NAME} "+mpi")
  endif()
else()
  target_compile_definitions(QuEST PUBLIC COMPILE_MPI=0)
endif()

if (ENABLE_CUDA)
  enable_language(CUDA)
  set(CMAKE_CUDA_STANDARD_REQUIRED ON)
  set_property(TARGET QuEST PROPERTY CUDA_STANDARD 17)

  target_compile_definitions(QuEST PUBLIC COMPILE_CUDA=1)
  
  if (VERBOSE_LIB_NAME)
    string(CONCAT LIB_NAME ${LIB_NAME} "+cuda")
  endif()
else()
  target_compile_definitions(QuEST PUBLIC COMPILE_CUDA=0)
endif()

if (ENABLE_CUQUANTUM)
  find_package(CUQUANTUM REQUIRED)
  target_compile_definitions(QuEST PUBLIC COMPILE_CUQUANTUM=1)
  target_link_libraries(QuEST PUBLIC CUQUANTUM::cuStateVec)
  set(CMAKE_INSTALL_RPATH_USE_LINK_PATH ON)
  if (VERBOSE_LIB_NAME)
    string(CONCAT LIB_NAME ${LIB_NAME} "+cuquantum")
  endif()
else()
  target_compile_definitions(QuEST PUBLIC COMPILE_CUQUANTUM=0)
endif()

if (ENABLE_HIP)
  enable_language(HIP)
  set(CMAKE_HIP_STANDARD_REQUIRED ON)
  set_property(TARGET QuEST PROPERTY HIP_STANDARD 17)
  
  target_compile_definitions(QuEST
    PUBLIC COMPILE_CUDA=1
    PUBLIC COMPILE_CUQUANTUM=0
    PUBLIC COMPILE_HIP=1
    PUBLIC __HIP_PLATFORM_AMD__
  )

  if (VERBOSE_LIB_NAME)
    string(CONCAT LIB_NAME ${LIB_NAME} "+hip")
  endif()
endif()

if (ENABLE_DEPRECATED_API)
  target_compile_definitions(QuEST PRIVATE INCLUDE_DEPRECATED_FUNCTIONS=1)

  if (VERBOSE_LIB_NAME)
    string(CONCAT LIB_NAME ${LIB_NAME} "+depr")
  endif()
endif()

# add math library
if (NOT MSVC)
  target_link_libraries(QuEST PUBLIC ${MATH_LIBRARY})
endif()

# Set output name
set_target_properties(QuEST PROPERTIES OUTPUT_NAME ${LIB_NAME})

# Add source files
add_subdirectory(quest)

## Examples

add_executable(min_example
  examples/tutorials/min_example.cpp
)
target_link_libraries(min_example PUBLIC QuEST::QuEST)

install(TARGETS min_example
  RUNTIME
  DESTINATION ${CMAKE_INSTALL_BINDIR}
)
set_target_properties(min_example
  PROPERTIES 
    INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/quest/${CMAKE_INSTALL_LIBDIR}"
)

if (BUILD_EXAMPLES)
  add_subdirectory(examples)
endif()

## User Source

if (USER_SOURCE AND NOT OUTPUT_EXE)
    message(SEND_ERROR "USER_SOURCE specified, but not OUTPUT_EXE.")
endif()
if (OUTPUT_EXE AND NOT USER_SOURCE)
    message(SEND_ERROR "OUTPUT_EXE specified, but not USER_SOURCE.")
endif()
if (USER_SOURCE AND OUTPUT_EXE)
  message(STATUS "Compiling ${USER_SOURCE} to executable ${OUTPUT_EXE}.")

  add_executable(${OUTPUT_EXE} ${USER_SOURCE})
  target_link_libraries(${OUTPUT_EXE} PUBLIC QuEST)
  install(TARGETS ${OUTPUT_EXE} RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
  set_target_properties(${OUTPUT_EXE} PROPERTIES INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/quest/${CMAKE_INSTALL_LIBDIR}")  
endif()

## Tests

if (ENABLE_TESTING)
  find_package(Catch2 3.1.1 QUIET)

  if (NOT TARGET Catch2::Catch2 AND DOWNLOAD_CATCH2)
    message(STATUS "Catch2 not found, it will be downloaded and built in the build directory.")
    Include(FetchContent)

    FetchContent_Declare(
      Catch2
      GIT_REPOSITORY https://github.com/catchorg/Catch2.git
      GIT_TAG        v3.1.1
    )
    
    FetchContent_MakeAvailable(Catch2)
  
  else()
    # We won't magically find it here, but this is the easiest way to
    # a) Force the build to fail, and
    # b) Print out all the useful information for helping CMake find Catch2
    find_package(Catch2 3.1.1 REQUIRED)
  endif()

  include(Catch)
  enable_testing()
  add_subdirectory(tests)
endif()

## Install

install(TARGETS QuEST
        EXPORT QuESTTargets
        LIBRARY  DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE  DESTINATION ${CMAKE_INSTALL_LIBDIR}
        RUNTIME  DESTINATION ${CMAKE_INSTALL_BINDIR}
        INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

## Export
# Define a few booleans to track how QuEST was built.
# We'll "bake" these into our QuESTConfig.cmake
set(QuEST_ENABLE_MULTITHREADING ${ENABLE_MULTITHREADING})
set(QuEST_ENABLE_DISTRIBUTION   ${ENABLE_DISTRIBUTION})

# Write CMake version file for QuEST
set(QuEST_INSTALL_CONFIGDIR "${CMAKE_INSTALL_LIBDIR}/cmake/QuEST")

# Write QuESTConfigVersion.cmake
write_basic_package_version_file(
        "${CMAKE_CURRENT_BINARY_DIR}/QuESTConfigVersion.cmake"
        VERSION ${PROJECT_VERSION}
        COMPATIBILITY AnyNewerVersion
)

# Configure QuESTConfig.cmake (from template)
configure_package_config_file(
        "${CMAKE_CURRENT_SOURCE_DIR}/cmake/QuESTConfig.cmake.in"
        "${CMAKE_CURRENT_BINARY_DIR}/QuESTConfig.cmake"
        INSTALL_DESTINATION "${QuEST_INSTALL_CONFIGDIR}"
)

# Install them
install(FILES
        "${CMAKE_CURRENT_BINARY_DIR}/QuESTConfig.cmake"
        "${CMAKE_CURRENT_BINARY_DIR}/QuESTConfigVersion.cmake"
        DESTINATION "${QuEST_INSTALL_CONFIGDIR}"
)

install(EXPORT QuESTTargets
        FILE QuESTTargets.cmake
        NAMESPACE QuEST::
        DESTINATION "${QuEST_INSTALL_CONFIGDIR}"
)

set(CMAKE_EXPORT_PACKAGE_REGISTRY ON)
export(PACKAGE QuEST)
